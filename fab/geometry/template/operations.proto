package mit_plato;

// PARAMETER HANDLE ------------------------------------------------------------

// Contains the value of any supported variable type
message AnyValueSpec {
  optional double double_val = 1;
  optional int32 int_val = 2;
  optional bool bool_val = 3;
  optional string string_val = 4;
  // TODO: add more types
};

message VarHandleSpec {
  enum HandleKind {
    UNK = 0; PARAM = 1; PROP = 2; META = 3; AUX = 4;
  }
  optional HandleKind kind = 1 [default = UNK];
  optional string name_space = 2;
  optional string name = 3;
};

message VarInfoSpec {
  enum VarType {
    TYPE_UNK = 0;
    TYPE_INT32 = 1;
    TYPE_DOUBLE = 2;
    TYPE_BOOL = 3;
    TYPE_STRING = 4;
    TYPE_CURVE_SPEC = 5;
    TYPE_CURVE_PARAMS = 6;
    TYPE_VECTOR = 7;
    // TODO: add differentiation for proto types
    TYPE_MESSAGE = 8;
  }

  optional VarHandleSpec handle = 1;
  optional VarType type = 2 [default = TYPE_UNK];
};

// Metavariable
message MetavariableSpec {
  required VarInfoSpec info = 1;
  optional AnyValueSpec val = 2;
};


// SUBCOMPONENTS (BASIC) -------------------------------------------------------
message VectorParam {
  optional double x = 1 [ default = 0.0 ];
  optional double y = 2 [ default = 0.0 ];
  optional double z = 3 [ default = 0.0 ];
};

message PointVectorParam {
  optional VectorParam pt = 1;

  // Can be a gradient or a normal, for example
  optional VectorParam vec = 2;

  // In case of spline modeling, holds the second gradient direction
  optional VectorParam vec2 = 3;
};

message ImageParam {
  // Special one, points to a filename? contains binary image?
  // Maybe need different kinds? E.g. binary image for extrusion, grayscale
  // for bump mapping, colored for texture?
};


// SUBCOMPONENTS (COMPOSITE) ---------------------------------------------------
message CurveParams {
  repeated PointVectorParam control_pt = 1;
};

message DistributionParams {
  optional double mean = 1;
  optional double stdev = 2;
  optional double hard_min = 3;
  optional double hard_max = 4;
};

message BranchLSystemParams {
  optional double tension = 1 [default = 0];

  optional DistributionParams bend_angle = 2;  // degrees (gaussian)
  optional DistributionParams branch_angle = 3;  // degrees (gaussian)
  optional DistributionParams n_branches = 4;  // poisson
  optional bool enable_3d = 5 [ default = true ];
  optional int32 n_iterations = 6 [ default = 10 ];
  optional int32 max_active_branches = 7 [ default = 100 ];

  message ActionPicker {
    // Only one must be set
    optional double prob = 1 [default = 0];
    optional int32 after_n_pts = 2 [default = 0];
    optional int32 after_n_steps = 3 [default = 0];
  };

  optional ActionPicker branch_when = 8;
  optional ActionPicker bend_when = 9;
  optional ActionPicker terminate_when = 10;

  optional bool repell_from_boundary = 11 [default = true];
};

// -----------------------------------------------------------------------------
// REGISTERED CURVE PARAMS
// -----------------------------------------------------------------------------

message RegisteredCurveSpec {
  extensions 4 to max;

  optional string encoded_transform = 1;
};

message CreateCircleSpec {
  extend RegisteredCurveSpec { optional CreateCircleSpec spec = 5; }

  optional double radius = 1 [ default = 1.0 ];
};

message CreateOvalSpec {
  extend RegisteredCurveSpec { optional CreateOvalSpec spec = 11; }

  optional double radius1 = 1 [ default = 1.0 ];
  optional double radius2 = 2 [ default = 1.5 ];
};

message CreatePolygonSpec {
  extend RegisteredCurveSpec { optional CreatePolygonSpec spec = 6; }

  optional int32 n_sides = 1 [ default = 4 ];
  optional double radius = 2 [ default = 1.0 ];
};

message CreateHermiteSpec {
  extend RegisteredCurveSpec { optional CreateHermiteSpec spec = 7; }

  optional CurveParams curve = 1;

  // If true ignores provided gradients and computes them from the
  // control points.
  optional bool force_catmull_rom = 2 [default = false];

  // If set > 0.0, is capped to 1.0 and used to construct Cardinal
  // spine if force_catmull_rom is set.
  optional double tension = 3 [default = 0.0];
};

message CreateImageCurveSpec {
  extend RegisteredCurveSpec { optional CreateImageCurveSpec spec = 8; }

  optional string image_filename = 1;
};

message CreateYinYangCurveSpec {
  extend RegisteredCurveSpec { optional CreateYinYangCurveSpec spec = 9; }

  optional bool remove_sharp_point = 1;
};

message CreateSineWaveSpec {
  extend RegisteredCurveSpec { optional CreateSineWaveSpec spec = 10; }

  optional double thickness = 1 [default = 0.5];

  // recommended values: 1.0 to 0.1 (we used 0.7/3)
  optional double amplitude = 2 [default = 1.0];

  optional int32 n_cycles = 3 [ default = 1];
};

// -----------------------------------------------------------------------------
// REGISTERED OPERATION PARAMS
// -----------------------------------------------------------------------------

message RegisteredOpSpec {
  extensions 4 to max;
};

message IfElseIfOpSpec {
  extend RegisteredOpSpec { optional IfElseIfOpSpec spec = 17; };

  repeated VarHandleSpec var = 1;

  repeated string bool_expr = 2;
};

message ForOpSpec {
  extend RegisteredOpSpec { optional ForOpSpec spec = 18; };

  required string var_name = 1;

  optional int32 n_iterations = 2 [default = 1];

  // All variables set / used to set variables during looping
  repeated VarHandleSpec used_var = 3;

  message VarAssignment {
    required VarHandleSpec var = 1;

    // $0 - i
    // $1 - n_iterations
    // $2... - correspond to used_var
    required string expr = 2;
  };
  repeated VarAssignment assignment = 4;
};

// CREATE OPERATION SPECS ------------------------------------------------------
message ImportMeshOpSpec {
  extend RegisteredOpSpec { optional ImportMeshOpSpec spec = 15; };

  optional string filename = 1;
};

message BoxFluidSimOpSpec {
  extend RegisteredOpSpec { optional BoxFluidSimOpSpec spec = 28; };

  optional int32 storminess = 1 [default = 50];
  optional string file_pattern = 2;
  optional string timings_file = 3;
};

message CreateOffsetCurveOpSpec {
  extend RegisteredOpSpec { optional CreateOffsetCurveOpSpec spec = 23; };

  optional RegisteredCurveSpec curve = 1;
  optional double thickness = 2;
};

message CreateRevolvedCurveOpSpec {
  extend RegisteredOpSpec { optional CreateRevolvedCurveOpSpec spec = 5; };

  optional double thickness = 1 [ default = 0.5 ];
  optional bool is_solid = 2 [ default = false ];
  optional RegisteredCurveSpec base_curve = 3;
  optional RegisteredCurveSpec vertical_curve = 4;

  optional bool enable_rotation = 5 [ default = true ];
};

message OpenscadCreateOpSpec {
  extend RegisteredOpSpec { optional OpenscadCreateOpSpec spec = 16; };

  // Note: first program file is loaded and then the program is
  // appended to it
  optional string program_file = 1;
  optional string program = 2;

  repeated MetavariableSpec var = 3;
};

// MODIFY OPERATION SPECS ------------------------------------------------------
message TransformOpSpec {
  extend RegisteredOpSpec { optional TransformOpSpec spec = 20; };

  // row-major; must have 16 elements or nothing for identity
  repeated double hom_matrix = 1;
};

message ScaleOpSpec {
  extend RegisteredOpSpec { optional ScaleOpSpec spec = 6; };

  optional double scale = 1 [ default = 1.0 ];
};

message SmoothOpSpec {
  extend RegisteredOpSpec { optional SmoothOpSpec spec = 22; };

  optional double lambda = 1 [ default = 0.2 ];
};

message SubdivideOpSpec {
  extend RegisteredOpSpec { optional SubdivideOpSpec spec = 26; };

  optional int32 n_times = 1 [ default = 1 ];
};

message RandomDisplacementOpSpec {
  extend RegisteredOpSpec { optional RandomDisplacementOpSpec spec = 7; };

  optional double amount = 1 [ default = 0.2 ];
};

message TranslateOpSpec {
  extend RegisteredOpSpec { optional TranslateOpSpec spec = 10; };

  optional VectorParam translation = 1;
};

message RotateOpSpec {
  extend RegisteredOpSpec { optional RotateOpSpec spec = 11; };

  optional VectorParam axis = 1;
  optional double degrees = 2 [ default = 0.0 ];
};

message TurnIntoTentacleOpSpec {
  extend RegisteredOpSpec { optional TurnIntoTentacleOpSpec spec = 27; };

  optional double a = 1 [default = 3.0];
  optional double start_radius = 2 [default = 1.0];
  optional double end_radius = 3 [default = 0.35];
  optional double height = 4 [default = 5];
  optional double n_revs = 5 [default = 0.3];
  optional double waviness = 6 [default = 0.5];
  optional double base_radius = 7 [default = 2.5];
  optional double horizontal_period = 8 [default = 2.5];
  optional double vertical_period = 9 [default = 4.5];
  optional int32 skip_first_n = 10 [default = 0];
  optional bool empty_if_flat = 11 [default = false];
};


// COMBINE OPERATION SPECS -----------------------------------------------------
message UnionOpSpec {
  extend RegisteredOpSpec { optional UnionOpSpec spec = 9; };
};

message IntersectOpSpec {
  extend RegisteredOpSpec { optional IntersectOpSpec spec = 21; };
};

message SimpleCombineOpSpec {
  extend RegisteredOpSpec { optional SimpleCombineOpSpec spec = 12; };
};

message SubtractOpSpec {
  extend RegisteredOpSpec { optional SubtractOpSpec spec = 13; };
};
